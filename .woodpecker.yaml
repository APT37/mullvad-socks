when:
  - event: push
    branch: master

skip_clone: true

steps:
  - name: clone
    image: fish
    environment:
      CARGO_TARGET_DIR:
        from_secret: cargo_target_dir
      REPOSITORY_DIR:
        from_secret: repository_dir
    commands:
      - mkdir -vp $REPOSITORY_DIR/$CI_REPO_NAME && cd $REPOSITORY_DIR/$CI_REPO_NAME
      - git clone -v $CI_REPO_CLONE_SSH_URL (pwd) || git pull -vf
      - ln -vnsf $CARGO_TARGET_DIR target
      - rmdir -v $CI_WORKSPACE
      - ln -vsf $REPOSITORY_DIR/$CI_REPO_NAME $CI_WORKSPACE

  - name: toolchain
    image: fish
    environment:
      RUST_TOOLCHAIN_PATH:
        from_secret: rust_toolchain_path
    commands:
      - rustup toolchain link woodpecker $RUST_TOOLCHAIN_PATH
      - rustup default woodpecker

  - name: test
    image: fish
    environment:
      CARGO_HOME:
        from_secret: cargo_home
    commands:
      - cargo test
  
  - name: build
    image: fish
    environment:
      CARGO_HOME:
        from_secret: cargo_home
    commands:
      - cargo build --release

  - name: PKGBUILD
    image: fish
    environment:
      ARCH_REPO_DIR:
        from_secret: arch_repo_dir
      ARCH_REPO_NAME:
        from_secret: arch_repo_name
    commands:
      - set repo_pkgs (exa --oneline $ARCH_REPO_DIR)
      - set make_pkgs (makepkg --packagelist)
      - set build false
      - for pkg in $make_pkgs; if not contains (string split -r -m 1 '/' $pkg | tail -1) $repo_pkgs; set build true; break; end; end
      - if $build; makepkg --nodeps --force; end
      - if $build; mv -v $make_pkgs $ARCH_REPO_DIR; end
      - if $build; for pkg in $make_pkgs; repo-add $ARCH_REPO_DIR/$ARCH_REPO_NAME.db.tar.zst $ARCH_REPO_DIR/(string split -r -m 1 '/' $pkg | tail -1); end; end